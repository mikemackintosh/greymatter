version: "3.8"

services:

  router:
    env_file: .env
    image: nginx:latest
    restart: always
    volumes:
      - ./_infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./_infra/nginx/api.conf:/etc/nginx/conf.d/api.conf:ro
      - ./_infra/nginx/web.conf:/etc/nginx/conf.d/web.conf:ro
    ports:
      - 8000:8000
    links:
      - frontend
      - backend
    depends_on:
      database:
        condition: service_healthy
    networks:
      - devnet  

  backend:
    env_file: .env
    build:
      context: .
      dockerfile: _infra/api-build.dockerfile
      args:
        - BUILD_ENV=dev
        - DOCKER_DEV=true
        - PORT=8080
    ports:
      - 8080:8080
    environment:
      - DSN="postgres://${DB_USER}:${DB_PASSWORD}@database:5432/${DB_NAME}?sslmode=disable"
    volumes:
      - ./:/app
    links:
      - database
    depends_on:
      database:
        condition: service_healthy
    command: ["air", "-c", ".air.toml"]
    networks:
      - devnet  

  frontend:
    env_file: .env
    build:
      context: .
      dockerfile: _infra/web.dockerfile
      args:
        - BUILD_ENV=dev
        - DOCKER_DEV=true
    ports:
      - 8081:3000
    volumes:
      - ./web:/app/web
      - /app/web/node_modules
    command: ["yarn", "vite", "dev", "--port", "3000", "--host", "0.0.0.0"]
    networks:
      - devnet

  database:
    image: postgres:15-alpine
    restart: always
    volumes:
      - ./_infra/pg-init-scripts/create-multiple-databases.sh:/docker-entrypoint-initdb.d/create-multiple-databases.sh:ro
      - postgres_data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=${DB_NAME},${AUTHN_DB_NAME},${AUTHZ_DB_NAME},${PROMETHEUS_DB_NAME},${GRAFANA_DB_NAME},${OIDC_DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app"]
      interval: 1s
      timeout: 5s
      retries: 5
    networks:
      - devnet  

volumes:
  postgres_data:

networks:
  devnet: